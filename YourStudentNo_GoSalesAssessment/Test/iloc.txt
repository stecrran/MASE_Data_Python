iloc is a method in pandas that allows you to select data from a DataFrame by index-based (integer) positions. Itâ€™s extremely useful for accessing specific rows and columns based on their numerical positions, rather than by label.

Syntax of iloc
python
Copy code
DataFrame.iloc[row_indexer, column_indexer]
row_indexer: The row(s) you want to access, specified by an integer index or slice.
column_indexer: The column(s) you want to access, also specified by an integer index or slice.
Basic Usage Examples
Suppose you have the following DataFrame:

python
Copy code
import pandas as pd

# Sample data
data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'David'],
    'Age': [24, 27, 22, 32],
    'Score': [88, 92, 95, 85]
}
df = pd.DataFrame(data)

print(df)
The DataFrame df looks like this:

Name	Age	Score
0	Alice	24	88
1	Bob	27	92
2	Charlie	22	95
3	David	32	85
Selecting Rows and Columns with iloc
1. Selecting a Single Row or Element
Single row: df.iloc[1] would return the second row of the DataFrame (remember, iloc is 0-based, so row 1 is the second row).

python
Copy code
df.iloc[1]
# Output:
# Name     Bob
# Age       27
# Score     92
Single element: df.iloc[1, 2] would return the value at the second row, third column (92).

python
Copy code
df.iloc[1, 2]  # Output: 92
2. Selecting Multiple Rows or Columns
Range of rows: df.iloc[0:2] selects the first two rows. The output is:

python
Copy code
df.iloc[0:2]
# Output:
#     Name  Age  Score
# 0  Alice   24     88
# 1    Bob   27     92
Range of rows and specific columns: df.iloc[0:3, 1:3] selects the first three rows and only the Age and Score columns:


df.iloc[0:3, 1:3]
# Output:
#    Age  Score
# 0   24     88
# 1   27     92
# 2   22     95
3. Selecting Rows or Columns Using Lists
List of specific rows: df.iloc[[0, 2]] selects only the first and third rows:

python
Copy code
df.iloc[[0, 2]]
# Output:
#      Name  Age  Score
# 0   Alice   24     88
# 2 Charlie   22     95
List of specific rows and columns: df.iloc[[0, 2], [0, 2]] selects the first and third rows and the first and third columns:

python
Copy code
df.iloc[[0, 2], [0, 2]]
# Output:
#      Name  Score
# 0   Alice     88
# 2 Charlie     95
Important Notes
0-Based Indexing: iloc uses 0-based indexing, so the first row and column are at position 0.
Slicing: Slicing is exclusive of the endpoint, similar to standard Python slicing (start:end includes start but not end).
Negative Indexing: Like Python lists, you can use negative indices with iloc, where -1 represents the last row or column.
Summary Table of Common iloc Usage
Operation	Code	Description
Single row by index	df.iloc[2]	Returns the third row
Single element by row and column	df.iloc[1, 2]	Returns the element in 2nd row, 3rd col
Multiple rows by range	df.iloc[0:3]	Returns first three rows
Multiple rows and columns by range	df.iloc[0:2, 1:3]	Returns first two rows, cols 2 and 3
Specific rows and columns by list	df.iloc[[0, 2], [0, 2]]	Returns specific rows and cols
